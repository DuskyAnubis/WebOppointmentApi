// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WebOppointmentApi.Data;

namespace WebOppointmentApi.Migrations
{
    [DbContext(typeof(ApiContext))]
    partial class ApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebOppointmentApi.Models.Dictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<string>("RemarkName");

                    b.Property<string>("RemarkValue");

                    b.Property<string>("TypeCode");

                    b.Property<string>("TypeName");

                    b.HasKey("Id");

                    b.ToTable("Dictionaries");
                });

            modelBuilder.Entity("WebOppointmentApi.Models.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessTypeCode");

                    b.Property<string>("AccessTypeName");

                    b.Property<string>("Address");

                    b.Property<string>("Code");

                    b.Property<string>("Info");

                    b.Property<string>("LogoUrl");

                    b.Property<string>("Name");

                    b.Property<string>("PicUrl");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("WebOppointmentApi.Models.Organazition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Code");

                    b.Property<string>("Info");

                    b.Property<string>("KeyWord");

                    b.Property<string>("LogoUrl");

                    b.Property<string>("Name");

                    b.Property<string>("OrgTypeCode");

                    b.Property<string>("OrgTypeName");

                    b.Property<int>("Parent");

                    b.Property<string>("PicUrl");

                    b.Property<string>("Status");

                    b.Property<string>("Tel");

                    b.HasKey("Id");

                    b.ToTable("Organazitions");
                });

            modelBuilder.Entity("WebOppointmentApi.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("Icon");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<int>("Parent");

                    b.Property<string>("Path");

                    b.Property<string>("Property");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("WebOppointmentApi.Models.Registered", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessTypeCode");

                    b.Property<string>("AccessTypeName");

                    b.Property<string>("Address");

                    b.Property<DateTime>("Birth");

                    b.Property<string>("CardTypeCode");

                    b.Property<string>("CardTypeName");

                    b.Property<DateTime>("DoctorDate");

                    b.Property<string>("DoctorTime");

                    b.Property<string>("FromTypeCode");

                    b.Property<string>("FromTypeName");

                    b.Property<string>("GenderCode");

                    b.Property<string>("GenderName");

                    b.Property<string>("IDCard");

                    b.Property<string>("MedicalTypeCode");

                    b.Property<string>("MedicalTypeName");

                    b.Property<string>("Name");

                    b.Property<string>("OrderId");

                    b.Property<string>("OrganazitionId");

                    b.Property<string>("Phone");

                    b.Property<int>("PlusPrice");

                    b.Property<int>("Price");

                    b.Property<DateTime>("RegisteredDate");

                    b.Property<string>("RegisteredStateCode");

                    b.Property<string>("RegisteredStateName");

                    b.Property<int>("SchedulingId");

                    b.Property<int>("SourceId");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TransactionDate");

                    b.Property<int>("TreatPrice");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SchedulingId");

                    b.ToTable("Registereds");
                });

            modelBuilder.Entity("WebOppointmentApi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("WebOppointmentApi.Models.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PermissionId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("WebOppointmentApi.Models.Scheduling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessTypeCode");

                    b.Property<string>("AccessTypeName");

                    b.Property<string>("Address");

                    b.Property<string>("EndTime");

                    b.Property<string>("EndTreatCode");

                    b.Property<DateTime>("EndTreatDate");

                    b.Property<string>("EndTreatName");

                    b.Property<string>("EndTreatReason");

                    b.Property<int>("MaxCount");

                    b.Property<int>("OrganazitionId");

                    b.Property<string>("PeriodTypeCode");

                    b.Property<string>("PeriodTypeName");

                    b.Property<int>("PlusPrice");

                    b.Property<int>("Price");

                    b.Property<DateTime>("RecoveryTreatDate");

                    b.Property<string>("RegisteredRankCode");

                    b.Property<string>("RegisteredRankName");

                    b.Property<DateTime>("SchedulingDate");

                    b.Property<string>("SchedulingTypeCode");

                    b.Property<string>("SchedulingTypeName");

                    b.Property<string>("StarTime");

                    b.Property<string>("Status");

                    b.Property<DateTime>("SurgeryDate");

                    b.Property<int>("TotalCount");

                    b.Property<int>("TreatPrice");

                    b.Property<int>("UserId");

                    b.Property<string>("UserRankCode");

                    b.Property<string>("UserRankName");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Schedulings");
                });

            modelBuilder.Entity("WebOppointmentApi.Models.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Num");

                    b.Property<string>("OppointmentStateCode");

                    b.Property<string>("OppointmentStateName");

                    b.Property<string>("Period");

                    b.Property<int>("SchedulingId");

                    b.Property<string>("Time");

                    b.HasKey("Id");

                    b.HasIndex("SchedulingId");

                    b.ToTable("Source");
                });

            modelBuilder.Entity("WebOppointmentApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("GenderCode");

                    b.Property<string>("GenderName");

                    b.Property<string>("Info");

                    b.Property<string>("KeyWord");

                    b.Property<string>("Name");

                    b.Property<int>("OrganazitionId");

                    b.Property<string>("PassWord");

                    b.Property<string>("PicUrl");

                    b.Property<string>("RegisteredRankCode");

                    b.Property<string>("RegisteredRankName");

                    b.Property<int>("RoleId");

                    b.Property<string>("Status");

                    b.Property<string>("Tel");

                    b.Property<string>("UserRankCode");

                    b.Property<string>("UserRankName");

                    b.Property<string>("UserTypeCode");

                    b.Property<string>("UserTypeName");

                    b.HasKey("Id");

                    b.HasIndex("OrganazitionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebOppointmentApi.Models.Registered", b =>
                {
                    b.HasOne("WebOppointmentApi.Models.Scheduling", "Scheduling")
                        .WithMany()
                        .HasForeignKey("SchedulingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebOppointmentApi.Models.RolePermission", b =>
                {
                    b.HasOne("WebOppointmentApi.Models.Permission", "Permission")
                        .WithMany("RolePermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebOppointmentApi.Models.Role", "Role")
                        .WithMany("RolePermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebOppointmentApi.Models.Scheduling", b =>
                {
                    b.HasOne("WebOppointmentApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebOppointmentApi.Models.Source", b =>
                {
                    b.HasOne("WebOppointmentApi.Models.Scheduling", "Scheduling")
                        .WithMany()
                        .HasForeignKey("SchedulingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebOppointmentApi.Models.User", b =>
                {
                    b.HasOne("WebOppointmentApi.Models.Organazition", "Organazition")
                        .WithMany("Users")
                        .HasForeignKey("OrganazitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebOppointmentApi.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
